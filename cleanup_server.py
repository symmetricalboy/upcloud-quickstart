#!/usr/bin/env python3
"""
UpCloud Server Cleanup Script
This script helps you clean up (delete) servers created during testing.
"""

import os
import json
import time
from dotenv import load_dotenv
from upcloud_api import CloudManager
from upcloud_api.errors import UpCloudAPIError

# Load environment variables
load_dotenv()

UPCLOUD_USERNAME = os.getenv('UPCLOUD_USERNAME')
UPCLOUD_PASSWORD = os.getenv('UPCLOUD_PASSWORD')

def main():
    """Main cleanup function."""
    print("üßπ UpCloud Server Cleanup Script")
    print("=" * 40)
    
    if not UPCLOUD_USERNAME or not UPCLOUD_PASSWORD:
        print("‚ùå Error: UpCloud credentials not found!")
        print("Please make sure your .env file is configured.")
        return
    
    try:
        manager = CloudManager(UPCLOUD_USERNAME, UPCLOUD_PASSWORD)
        print("‚úÖ Connected to UpCloud API")
    except Exception as e:
        print(f"‚ùå Failed to connect to UpCloud API: {e}")
        return
    
    # Check for deployed server info
    if os.path.exists('deployed_server.json'):
        print("\nüìÑ Found deployed_server.json")
        with open('deployed_server.json', 'r') as f:
            server_info = json.load(f)
        
        print(f"   Server UUID: {server_info['uuid']}")
        print(f"   Title: {server_info['title']}")
        print(f"   IP: {server_info['ip']}")
        print(f"   Created: {server_info['created']}")
        
        response = input(f"\n‚ùì Delete server {server_info['title']} ({server_info['uuid']})? (y/N): ").strip().lower()
        if response == 'y':
            try:
                # Get server object and check its current state
                server = manager.get_server(server_info['uuid'])
                print(f"üìä Current server state: {server.state}")
                
                if server.state == 'started':
                    print("‚èπÔ∏è  Stopping server...")
                    server.stop()
                    
                    # Wait for the server to actually stop
                    print("‚è≥ Waiting for server to stop...")
                    max_wait = 60  # Maximum wait time in seconds
                    wait_time = 0
                    while wait_time < max_wait:
                        time.sleep(5)
                        wait_time += 5
                        
                        # Check server state
                        server = manager.get_server(server_info['uuid'])
                        print(f"   Server state: {server.state}")
                        
                        if server.state == 'stopped':
                            print("‚úÖ Server has stopped!")
                            break
                        elif server.state == 'error':
                            print("‚ùå Server is in error state")
                            break
                    
                    if wait_time >= max_wait:
                        print("‚è∞ Timeout waiting for server to stop. Attempting deletion anyway...")
                        
                elif server.state == 'stopped':
                    print("‚úÖ Server is already stopped!")
                    
                elif server.state == 'maintenance':
                    print("‚ö†Ô∏è  Server is in maintenance mode, waiting...")
                    time.sleep(10)
                    
                else:
                    print(f"‚ÑπÔ∏è  Server is in state: {server.state}")
                
                time.sleep(2)  # Small additional buffer
                
                # Delete server
                print("üóëÔ∏è  Deleting server...")
                manager.delete_server(server_info['uuid'])
                
                print("‚úÖ Server deleted successfully!")
                
                # Remove the server info file
                os.remove('deployed_server.json')
                print("‚úÖ Cleaned up deployed_server.json")
                
            except UpCloudAPIError as e:
                print(f"‚ùå Failed to delete server: {e}")
            except Exception as e:
                print(f"‚ùå Unexpected error: {e}")
        else:
            print("‚ùå Server deletion cancelled")
    
    # List all servers for manual cleanup
    print("\nüñ•Ô∏è  Listing all your servers:")
    try:
        servers = manager.get_servers()
        if not servers:
            print("   No servers found")
        else:
            for server in servers:
                print(f"   ‚Ä¢ {server.title} ({server.uuid}) - {server.state} - {server.zone}")
                
                # Offer to delete servers with 'UpCloud-WebServer' in the title
                if 'UpCloud-WebServer' in server.title:
                    response = input(f"     ‚ùì Delete this server? (y/N): ").strip().lower()
                    if response == 'y':
                        try:
                            print(f"     üìä Current server state: {server.state}")
                            
                            if server.state == 'started':
                                print("     ‚èπÔ∏è  Stopping server...")
                                server.stop()
                                
                                # Wait for the server to actually stop
                                print("     ‚è≥ Waiting for server to stop...")
                                max_wait = 60  # Maximum wait time in seconds
                                wait_time = 0
                                while wait_time < max_wait:
                                    time.sleep(5)
                                    wait_time += 5
                                    
                                    # Check server state
                                    server = manager.get_server(server.uuid)
                                    print(f"        Server state: {server.state}")
                                    
                                    if server.state == 'stopped':
                                        print("     ‚úÖ Server has stopped!")
                                        break
                                    elif server.state == 'error':
                                        print("     ‚ùå Server is in error state")
                                        break
                                
                                if wait_time >= max_wait:
                                    print("     ‚è∞ Timeout waiting for server to stop. Attempting deletion anyway...")
                                    
                            elif server.state == 'stopped':
                                print("     ‚úÖ Server is already stopped!")
                                
                            elif server.state == 'maintenance':
                                print("     ‚ö†Ô∏è  Server is in maintenance mode, waiting...")
                                time.sleep(10)
                                
                            else:
                                print(f"     ‚ÑπÔ∏è  Server is in state: {server.state}")
                            
                            time.sleep(2)  # Small additional buffer
                            
                            print("     üóëÔ∏è  Deleting server...")
                            manager.delete_server(server.uuid)
                            print("     ‚úÖ Server deleted!")
                            
                        except UpCloudAPIError as e:
                            print(f"     ‚ùå Failed to delete server: {e}")
                        except Exception as e:
                            print(f"     ‚ùå Unexpected error: {e}")
                            
    except Exception as e:
        print(f"‚ùå Error listing servers: {e}")
    
    print("\nüéâ Cleanup complete!")

if __name__ == "__main__":
    main()
